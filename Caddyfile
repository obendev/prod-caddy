# prod-caddy, A production-ready Caddyfile, probably | MIT License
# https://github.com/obendev/prod-caddy

# ######################################################################
# # GLOBAL CONFIGURATION                                               #
# ######################################################################

{
        # Set up logging for Caddy
        #
        # https://caddyserver.com/docs/logging
        # https://caddyserver.com/docs/caddyfile/directives/log
        #
        # The `log` directive in the global options block is used to
        # configure logs that are not site-specific. For site-specific logs,
        # the `log` directive should be used within the site block.
        log {
                # Output logs to a file at the specified path
                output file /var/log/caddy/error.log
                
                # Minimum level of messages to be logged
                level WARN
        }
}

# ######################################################################
# # SNIPPETS                                                           #
# ######################################################################

# ----------------------------------------------------------------------
# | File access                                                        |
# ----------------------------------------------------------------------

# (1) Block access to all hidden files and directories except for the
# visible content from within the `/.well-known/` hidden directory.
#
# These types of files usually contain user preferences or the preserved state
# of a utility, and can include rather private places like, for example, the
# `.git` or `.svn` directories.
#
# The `/.well-known/` directory represents the standard (RFC 5785) path prefix
# for "well-known locations" (e.g.: `/.well-known/manifest.json`,
# `/.well-known/keybase.txt`), and therefore, access to its visible content
# should not be blocked.
#
# https://www.mnot.net/blog/2010/04/07/well-known
# https://tools.ietf.org/html/rfc5785

# (2) Block access to files that can expose sensitive information.
#
# By default, block access to backup and source files that may be left by some
# text editors and can pose a security risk when anyone has access to them.
#
# https://feross.org/cmsploit/
#
# (!) Update the regular expression from below to include any files
#     that might end up on your production server and can expose sensitive
#     information about your website. These files may include: configuration
#     files, files that contain metadata about the project (e.g.: project
#     dependencies, build scripts, etc.).

(fileAccess) {
        # (1)
        @dotfiles {
                not path /.well-known/*
                path /.*
        }
        respond @dotfiles 403

        # (2)
        @sensitiveFiles {
                path_regexp (^#.*#|\.(bak|conf|dist|fla|in[ci]|log|orig|psd|sh|sql|sw[op])|~)$
        }
        respond @sensitiveFiles 403
}

# ----------------------------------------------------------------------
# | Basic configuration                                                |
# ----------------------------------------------------------------------

# (1) By default, it does not allow directory browsing, so there is no need to
# explicitly disable it like in other web servers.
# https://caddyserver.com/docs/caddyfile/directives/file_server
(basic) {
        # (1)
        file_server

        import snippet
}

# ######################################################################
# # SITES                                                              #
# ######################################################################

# ----------------------------------------------------------------------
# | Section for domain.tld host                                        |
# ----------------------------------------------------------------------
# 
# This virtual host listens for the `domain.tld` host and handles requests.
# Replace `domain.tld` with your hostname before enabling.

# (1) Set the site root to `/srv/caddy/domain.tld/public` for all requests.
# /srv is the expected directory according to the FHS, see
# https://refspecs.linuxfoundation.org/FHS_3.0/fhs/ch03s17.html
# https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard#Directory_structure

# (2) Set up site-specific logging.
# By default, Caddy uses JSON Structured Log Format. To change the log format to
# NCSA Combined Log Format, it is necessary to add the `format` module within the
# `log` directive. `output file` specifies logging to a file at the specified path.
# https://caddyserver.com/docs/logging
# https://caddyserver.com/docs/caddyfile/directives/log

domain.tld {
        # (1)
        root * /srv/caddy/domain.tld/public
        
        # (2)
        log {
                output file /var/log/caddy/domain.tld/access.log
        }
        
        import basic
}
